name: Build and Test

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            binary: rquest_runner
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            binary: rquest_runner.exe

    runs-on: ${{ matrix.os }}

    steps:
    - uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}

    - name: Install Windows Dependencies
      if: matrix.os == 'windows-latest'
      shell: pwsh
      run: |
        choco install cmake -y
        choco install strawberryperl -y
        choco install pkgconfiglite -y
        choco install llvm -y
        choco install nasm -y
        # Add NASM to PATH
        $nasmPath = "C:\Program Files\NASM"
        $env:Path = "$nasmPath;" + $env:Path
        echo "$nasmPath" >> $env:GITHUB_PATH

    - name: Build Binary
      env:
        RUSTFLAGS: ${{ matrix.os == 'windows-latest' && '-C target-feature=+crt-static' || '' }}
      run: |
        cargo build --bin rquest_runner --release --target ${{ matrix.target }} --features "cli,emulation,gzip,brotli,deflate,zstd,rquest/full"

    - name: Test Binary
      run: |
        ${{ matrix.os == 'windows-latest' && '.\' || './' }}target/${{ matrix.target }}/release/${{ matrix.binary }} -P Chrome136 -m GET -u https://cloudflare.com/cdn-cgi/trace > trace_output.txt
        echo "Test completed at $(date '+%Y-%m-%d %H:%M:%S')" >> trace_output.txt

    - name: Create Artifact Name with Timestamp (Windows)
      if: matrix.os == 'windows-latest'
      id: artifact_name_windows
      shell: pwsh
      run: |
        echo "artifact_name=rquest-$([datetime]::Now.ToString('yyyyMMdd-HHmmss'))-${{ matrix.os }}" >> $env:GITHUB_OUTPUT

    - name: Create Artifact Name with Timestamp (Unix)
      if: matrix.os != 'windows-latest'
      id: artifact_name_unix
      shell: bash
      run: |
        echo "artifact_name=rquest-$(date +%Y%m%d-%H%M%S)-${{ matrix.os }}" >> $GITHUB_OUTPUT

    - name: Create Distribution Directory
      if: matrix.os == 'windows-latest'
      shell: pwsh
      run: |
        if (-not (Test-Path dist)) {
          New-Item -ItemType Directory -Path dist | Out-Null
        }
        Copy-Item -Path "target/${{ matrix.target }}/release/${{ matrix.binary }}" -Destination "dist/" -Force
        Copy-Item -Path "trace_output.txt" -Destination "dist/" -Force

    - name: Create Distribution Directory
      if: matrix.os != 'windows-latest'
      shell: bash
      run: |
        mkdir -p dist
        cp "target/${{ matrix.target }}/release/${{ matrix.binary }}" dist/
        cp trace_output.txt dist/

    - name: Upload Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.os == 'windows-latest' && steps.artifact_name_windows.outputs.artifact_name || steps.artifact_name_unix.outputs.artifact_name }}
        path: dist/
        retention-days: 30

  test-matrix:
    needs: build
    runs-on: ubuntu-latest
    steps:
    - name: Download All Artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts
        pattern: rquest-*
        merge-multiple: true

    - name: Create Test Report
      shell: bash
      run: |
        {
          echo "# Build Test Report"
          echo "Generated on: $(date '+%Y-%m-%d %H:%M:%S UTC')"
          echo "Commit: ${{ github.sha }}"
          echo ""
          echo "## Build Status"
          echo ""
          echo "| Platform | Status | Test Output |"
          echo "|----------|--------|-------------|"
          
          for dir in artifacts/rquest-*; do
            platform=$(basename "$dir" | cut -d'-' -f4)
            if [ -f "$dir/trace_output.txt" ]; then
              output=$(head -n 1 "$dir/trace_output.txt")
              echo "| $platform | ✅ Success | \`$output\` |"
            else
              echo "| $platform | ❌ Failed | No test output |"
            fi
          done
          
          echo ""
          echo "## Detailed Test Output"
          echo ""
          for dir in artifacts/rquest-*; do
            platform=$(basename "$dir" | cut -d'-' -f4)
            echo "### $platform"
            echo "\`\`\`"
            if [ -f "$dir/trace_output.txt" ]; then
              cat "$dir/trace_output.txt"
            else
              echo "No test output available"
            fi
            echo "\`\`\`"
            echo ""
          done
        } > test_report.md

    - name: Upload Test Report
      uses: actions/upload-artifact@v4
      with:
        name: test-report-${{ github.sha }}
        path: test_report.md
        retention-days: 30

  verify-artifacts:
    needs: [build, test-matrix]
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Download Artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
          pattern: rquest-*
          merge-multiple: true

      - name: Setup Test Environment
        if: matrix.os == 'windows-latest'
        shell: pwsh
        run: |
          # List all contents of artifacts directory for debugging
          Write-Host "Contents of artifacts directory:"
          Get-ChildItem -Path "artifacts" -Force
          
          # Create dist directory
          New-Item -ItemType Directory -Path "dist" -Force | Out-Null
          
          # Copy binary with error handling
          $binaryPath = Join-Path "artifacts" "rquest_runner.exe"
          if (Test-Path $binaryPath) {
            Copy-Item -Path $binaryPath -Destination "dist\" -Force
            Write-Host "Successfully copied binary to dist/"
            # Verify the copy
            Write-Host "Contents of dist directory after copy:"
            Get-ChildItem -Path "dist" -Force
          } else {
            Write-Host "Binary not found at $binaryPath"
            Write-Host "Available files:"
            Get-ChildItem -Path "artifacts" -Force
            exit 1
          }

      - name: Run Verification Tests (Windows)
        if: matrix.os == 'windows-latest'
        shell: pwsh
        run: |
          # Change to dist directory
          Set-Location dist
          Write-Host "Current directory: $(Get-Location)"
          Write-Host "Directory contents:"
          Get-ChildItem -Force
          
          Write-Host "Running test..."
          if (-not (Test-Path "rquest_runner.exe")) {
            Write-Host "Binary not found in dist directory. Contents:"
            Get-ChildItem -Force
            exit 1
          }
          .\rquest_runner.exe -P Chrome136 -m get -u https://cloudflare.com/cdn-cgi/trace > trace_output.txt
          if ($LASTEXITCODE -ne 0) {
            Write-Host "Test failed with exit code: $LASTEXITCODE"
            exit 1
          }
          Add-Content -Path "trace_output.txt" -Value "Test completed at $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss')"
          Write-Host "Test Results:"
          Get-Content trace_output.txt

      - name: Setup Test Environment
        if: matrix.os != 'windows-latest'
        shell: bash
        run: |
          # List all contents of artifacts directory for debugging
          echo "Contents of artifacts directory:"
          ls -la artifacts/
          
          # Create dist directory
          mkdir -p dist
          
          # Copy binary with error handling
          if [ -f "artifacts/rquest_runner" ]; then
            cp "artifacts/rquest_runner" dist/ || {
              echo "Failed to copy binary. Error: $?"
              exit 1
            }
            echo "Successfully copied binary to dist/"
          else
            echo "Binary not found at artifacts/rquest_runner"
            echo "Available files:"
            ls -la artifacts/
            exit 1
          fi

      - name: Run Verification Tests (Unix)
        if: matrix.os != 'windows-latest'
        shell: bash
        run: |
          cd dist
          echo "Running test..."
          chmod +x rquest_runner
          ./rquest_runner -P Chrome136 -m get -u https://cloudflare.com/cdn-cgi/trace > trace_output.txt
          echo "Test completed at $(date '+%Y-%m-%d %H:%M:%S')" >> trace_output.txt
          echo "Test Results:"
          cat trace_output.txt
          if [ $? -ne 0 ]; then exit 1; fi

      - name: Upload Verification Results
        uses: actions/upload-artifact@v4
        with:
          name: verification-${{ matrix.os }}-${{ github.sha }}
          path: dist/trace_output.txt
          retention-days: 30

  create-release:
    needs: [build, test-matrix, verify-artifacts]
    if: github.event_name == 'workflow_dispatch' || github.event_name == 'push'
    runs-on: ubuntu-latest
    steps:
      - name: Download All Artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
          pattern: rquest-*
          merge-multiple: true

      - name: Download Test Report
        uses: actions/download-artifact@v4
        with:
          path: test-report
          pattern: test-report-*

      - name: Download Verification Results
        uses: actions/download-artifact@v4
        with:
          path: verification
          pattern: verification-*

      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          name: Release ${{ github.sha }}
          tag_name: v${{ github.sha }}
          body_path: test-report/test_report.md
          draft: false
          prerelease: false
          files: |
            artifacts/rquest-*/rquest_runner*
            artifacts/rquest-*/trace_output.txt
            verification/*/trace_output.txt
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 